**
   * Need to find a way to share the "BLOC LOC TABLE" with all the users.
   * Each peer with a copy of the table is very "blockchain" in nature.
     Maybe want to avoid it.
   * Thinking of making a single copy of the table with the server.
   * The peer can request to view the table at any time.
   * The server will respond with the filenames, from which, the peer can
     select the file to download.

---------------------------------------------------------------------------------
---------------------------------------------------------------------------------

**
  * The filenames transfer from server to client is complete.
  * Theres a bug in the DHT table after introducing the 'num_blocks' attribute to 
    the file structure fix it.

---------------------------------------------------------------------------------
---------------------------------------------------------------------------------

** Now that some mysql using C api testing is done, start implementing it.
  * Implement the login databse.
      - First create the required tables manually in mysql.
      - Make sure to use the concept of 'foreign keys'.
      
---------------------------------------------------------------------------------
---------------------------------------------------------------------------------

** Trying a hand on compression:

  * Where should the compression happen?
    - Ideally on the client side, to save network bandwidth, trading off with the
      simplicity of client side architecture.
    - Maybe encrypting in future, so first compress, then encrypt.
    - Starting with client side encryption.

  * DEFLATE algorithm :
    - Huffman + LZ77
    - 3 bit header :
      - 1st bit : 1 - Last block
                  0 - Not the lasdt block, more blocks follow
      - 2 & 3 bit : 00 - stored/raw section(uncompressed) - 0 to 65535 bytes
                    01 - static Huffman compressed block
                    10 - compressed block with Huffman Theres
                    11 - reserved, don't use

    - Phase 1 : 
        Match and replace duplicate strings with pointers.
    - Phase 2 :
        Replace symbols with the weighted sumbols based on frequency.

    HUFFMAN PART :
      - Calculate Frequencies :
        Guess or calculate ? Maybe a combination of both.
          -- Take the average of 10 random sampliing regions ? 


    DATA:
    - For 1 gb file : The distribution is even ... its almost weird.
      {'0': 134221332, '1': 134212584, '2': 134208494, '3': 134202419, '4': 134200327,
       '5': 134236757, '6': 134231513, '7': 134220297, '8': 134197373, '9': 134219856, 
       'a': 134217135, 'b': 134220965, 'c': 134214495, 'd': 134221382, 'e': 134241200, 
       'f ': 134217519}


  * Arithmetic Encoding :
    - Frequently used characters stored with fever bits, than non frewuent characters.
    - Length contributed by a character of probability p, is log(1/p).
    - Major adv : Seperation of the coder from the modeling process.
    - Encodes entire message into a single floating point number. Represents the current information as a range, defined by two numbers.
      - Model : Predicts the probability of occurance of a character.
      - Encoder/Decodr : Encodes/decodes based on the model.
    - The conceptual idea of an arithmetic coding model is that each symbol will own its own unique segment of the number line of real numbers between 0 and 1.

  * Asymmetric Numeral System :
    - The basic idea is to encode information into a single natural number x.